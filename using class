#include<queue>
#include<vector>



class PriorityQueue {
    vector<int> pq;
    
    public :
    
    PriorityQueue() {
        
    }
    
    bool isEmpty() {
        return pq.size() == 0;
    }
    
    // Return the size of priorityQueue - no of elements present
    int getSize() {
        return pq.size();
    }
    
    int getMin() {
        if(isEmpty()) {
            return 0;		// Priority Queue is empty
        }
        return pq[0];
    }
    
    void insert(int element) {
        pq.push_back(element);
        
        int childIndex = pq.size() - 1;
        
        while(childIndex > 0) {
            int parentIndex = (childIndex - 1) / 2;
            
            if(pq[childIndex] < pq[parentIndex]) {
                int temp = pq[childIndex];
                pq[childIndex] = pq[parentIndex];
                pq[parentIndex] = temp;
            }
            else {
                break;
            }
            childIndex = parentIndex;
        }
        
    }
    
    int removeMin() {
        if(isEmpty()){
            return 0;
        }
        
        int ans=pq[0];
        
         pq[0]=pq[pq.size()-1];
        //int minIndex=0;
        pq.pop_back();
        int parentIndex=0;
        int LeftChildIndex=2*parentIndex+1;
        int rightChildIndex=2*parentIndex+2;
        
        
         while(LeftChildIndex<pq.size()){
             int minIndex=parentIndex;
             if(pq[minIndex]>pq[LeftChildIndex]){
                 minIndex=LeftChildIndex;
             }
             if(rightChildIndex<pq.size()  && pq[minIndex]>pq[rightChildIndex]){
                 minIndex=rightChildIndex;
             }
             if(minIndex==parentIndex){
                 break;
             }
             int temp=pq[minIndex];
             pq[minIndex]=pq[parentIndex];
             pq[parentIndex]=temp;
             
              parentIndex=minIndex;
         LeftChildIndex=2*parentIndex+1;
         rightChildIndex=2*parentIndex+2;
             
             
         }
        
        return ans;
        
    }
    
    
};








vector<int> mergeKSortedArrays(vector<vector<int>*> input){
    
    PriorityQueue pq;
    
    
    for(int i=0;i<input.size();i++){
        vector<int> *current=input[i];
        for(int j=0;j<current->size();j++){
            
            pq.insert(current->at(j));
        }
    }
    
    vector<int> ans;
    int size=pq.getSize();
    for(int i=0;i<size;i++){
        
        ans.push_back(pq.getMin());
        pq.removeMin();
    }
    
    return ans;
    
}
